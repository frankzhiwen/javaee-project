<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="frank.mapper.StudentMapper">
  <resultMap id="BaseResultMap" type="frank.model.Student" extends="frank.mapper.DictionaryTagMapper.BaseResultMap">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="student_name" jdbcType="VARCHAR" property="studentName" />
    <result column="student_no" jdbcType="VARCHAR" property="studentNo" />
    <result column="id_card" jdbcType="VARCHAR" property="idCard" />
    <result column="student_email" jdbcType="VARCHAR" property="studentEmail" />
    <result column="classes_id" jdbcType="INTEGER" property="classesId" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <association property="classes"
                 resultMap="frank.mapper.ClassesMapper.BaseResultMap"
                 columnPrefix="prefix_c_" />
  </resultMap>
  <sql id="Base_Column_List">
    id, student_name, student_no, id_card, student_email, classes_id, create_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from student
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from student
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="frank.model.Student">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into student (student_name, student_no, id_card, 
      student_email, classes_id, create_time
      )
    values (#{studentName,jdbcType=VARCHAR}, #{studentNo,jdbcType=VARCHAR}, #{idCard,jdbcType=VARCHAR}, 
      #{studentEmail,jdbcType=VARCHAR}, #{classesId,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="frank.model.Student">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into student
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="studentName != null">
        student_name,
      </if>
      <if test="studentNo != null">
        student_no,
      </if>
      <if test="idCard != null">
        id_card,
      </if>
      <if test="studentEmail != null">
        student_email,
      </if>
      <if test="classesId != null">
        classes_id,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="studentName != null">
        #{studentName,jdbcType=VARCHAR},
      </if>
      <if test="studentNo != null">
        #{studentNo,jdbcType=VARCHAR},
      </if>
      <if test="idCard != null">
        #{idCard,jdbcType=VARCHAR},
      </if>
      <if test="studentEmail != null">
        #{studentEmail,jdbcType=VARCHAR},
      </if>
      <if test="classesId != null">
        #{classesId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="frank.model.Student">
    update student
    <set>
      <if test="studentName != null">
        student_name = #{studentName,jdbcType=VARCHAR},
      </if>
      <if test="studentNo != null">
        student_no = #{studentNo,jdbcType=VARCHAR},
      </if>
      <if test="idCard != null">
        id_card = #{idCard,jdbcType=VARCHAR},
      </if>
      <if test="studentEmail != null">
        student_email = #{studentEmail,jdbcType=VARCHAR},
      </if>
      <if test="classesId != null">
        classes_id = #{classesId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="frank.model.Student">
    update student
    set student_name = #{studentName,jdbcType=VARCHAR},
      student_no = #{studentNo,jdbcType=VARCHAR},
      id_card = #{idCard,jdbcType=VARCHAR},
      student_email = #{studentEmail,jdbcType=VARCHAR},
      classes_id = #{classesId,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectOne" parameterType="frank.model.Student" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from student
    <trim prefix="where" suffixOverrides="and">
      <if test="studentName != null">
        student_name = #{studentName,jdbcType=VARCHAR}
      </if>
      <if test="studentNo != null">
        student_no = #{studentNo,jdbcType=VARCHAR}
      </if>
      <if test="idCard != null">
        id_card = #{idCard,jdbcType=VARCHAR}
      </if>
      <if test="studentEmail != null">
        student_email = #{studentEmail,jdbcType=VARCHAR}
      </if>
      <if test="classesId != null">
        classes_id = #{classesId,jdbcType=INTEGER}
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP}
      </if>
    </trim>
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    select id, student_name, student_no, id_card, student_email, classes_id, create_time
    from student
  </select>
  <select id="selectByCondition" parameterType="frank.model.Student" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from student
    <trim prefix="where" suffixOverrides="and">
      <if test="studentName != null">
        student_name = #{studentName,jdbcType=VARCHAR}
      </if>
      <if test="studentNo != null">
        student_no = #{studentNo,jdbcType=VARCHAR}
      </if>
      <if test="idCard != null">
        id_card = #{idCard,jdbcType=VARCHAR}
      </if>
      <if test="studentEmail != null">
        student_email = #{studentEmail,jdbcType=VARCHAR}
      </if>
      <if test="classesId != null">
        classes_id = #{classesId,jdbcType=INTEGER}
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP}
      </if>
    </trim>
  </select>
  <delete id="deleteByIds" parameterType="java.util.List">
    delete from student
      where id in
    <foreach close=")" collection="list" item="item" open="(" separator=",">
      #{item}
    </foreach>
  </delete>

  <sql id="queryWithClasses">
      SELECT
          s.id,
          s.student_name,
          s.student_no,
          s.id_card,
          s.student_email,
          s.classes_id,
          s.create_time,
          c.id prefix_c_id,
          c.classes_name prefix_c_classes_name,
          c.classes_graduate_year prefix_c_classes_graduate_year,
          c.classes_major prefix_c_classes_major,
          c.classes_desc prefix_c_classes_desc,
          c.create_time prefix_c_create_time
      FROM
          student s
      JOIN classes c ON s.classes_id=c.id
  </sql>
  <select id="query" parameterType="frank.model.Student" resultMap="BaseResultMap">
    <include refid="queryWithClasses" />
    <if test="searchText != null and searchText != ''">
      where s.student_name like concat('%', #{searchText}, '%')
    </if>
  </select>
  <select id="queryById" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <include refid="queryWithClasses" />
    where
    s.id = #{id}
  </select>
  <select id="queryAsDict" parameterType="java.lang.String" resultMap="BaseResultMap">
      SELECT
          stu.id dictionary_tag_key,
          stu.student_name dictionary_tag_value
      FROM
          student stu
          JOIN classes cls ON stu.classes_id = cls.id
          JOIN exam e ON e.classes_id = cls.id
      WHERE
          e.id = #{id}
  </select>
</mapper>