<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="frank.mapper.BuildingMapper">
  <resultMap id="BaseResultMap" type="frank.model.Building">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="building_name" jdbcType="VARCHAR" property="buildingName" />
    <result column="building_desc" jdbcType="VARCHAR" property="buildingDesc" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
  </resultMap>
  <sql id="Base_Column_List">
    id, building_name, building_desc, create_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from building
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from building
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="frank.model.Building">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into building (building_name, building_desc, create_time
      )
    values (#{buildingName,jdbcType=VARCHAR}, #{buildingDesc,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="frank.model.Building">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into building
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="buildingName != null">
        building_name,
      </if>
      <if test="buildingDesc != null">
        building_desc,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="buildingName != null">
        #{buildingName,jdbcType=VARCHAR},
      </if>
      <if test="buildingDesc != null">
        #{buildingDesc,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="frank.model.Building">
    update building
    <set>
      <if test="buildingName != null">
        building_name = #{buildingName,jdbcType=VARCHAR},
      </if>
      <if test="buildingDesc != null">
        building_desc = #{buildingDesc,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="frank.model.Building">
    update building
    set building_name = #{buildingName,jdbcType=VARCHAR},
      building_desc = #{buildingDesc,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectOne" parameterType="frank.model.Building" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from building
    <trim prefix="where" suffixOverrides="and">
      <if test="buildingName != null">
        building_name = #{buildingName,jdbcType=VARCHAR}
      </if>
      <if test="buildingDesc != null">
        building_desc = #{buildingDesc,jdbcType=VARCHAR}
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP}
      </if>
    </trim>
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    select id, building_name, building_desc, create_time
    from building
  </select>
  <select id="selectByCondition" parameterType="frank.model.Building" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from building
    <trim prefix="where" suffixOverrides="and">
      <if test="buildingName != null">
        building_name = #{buildingName,jdbcType=VARCHAR}
      </if>
      <if test="buildingDesc != null">
        building_desc = #{buildingDesc,jdbcType=VARCHAR}
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP}
      </if>
    </trim>
  </select>
  <delete id="deleteByIds" parameterType="java.util.List">
    delete from building
      where id in
    <foreach close=")" collection="list" item="item" open="(" separator=",">
      #{item}
    </foreach>
  </delete>

  <select id="query" parameterType="frank.model.Building" resultMap="BaseResultMap">
    SELECT
    b.id,
    b.building_name,
    b.building_desc,
    count( d.id ) dorm_count,
    b.create_time
    FROM
    building b
    JOIN dorm d ON d.building_id = b.id
    <if test="searchText != null and searchText != ''">
      WHERE b.building_name LIKE concat('%', #{searchText}, '%')
    </if>
    GROUP BY
    d.building_id
    ORDER BY b.building_name
    <if test="sortOrder != null and sortOrder != ''">
      ${sortOrder}
    </if>

  </select>

  <select id="queryById" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        SELECT
            b.id,
            b.building_name,
            b.building_desc,
            count( d.id ) dorm_count,
            b.create_time
        FROM
            building b
                JOIN dorm d ON d.building_id = b.id
        WHERE
            b.id = #{id}
        GROUP BY
            d.building_id
    </select>

  <select id="queryAsDict" parameterType="java.lang.String" resultMap="frank.mapper.DictionaryTagMapper.BaseResultMap">
        SELECT
            id dictionary_tag_key,
            building_name dictionary_tag_value
        FROM
            building
    </select>
</mapper>