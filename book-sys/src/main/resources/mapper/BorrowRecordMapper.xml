<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.example.mapper.BorrowRecordMapper">
  <resultMap id="BaseResultMap" type="org.example.model.BorrowRecord">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="book_id" jdbcType="INTEGER" property="bookId" />
    <result column="student_id" jdbcType="INTEGER" property="studentId" />
    <result column="start_time" jdbcType="TIMESTAMP" property="startTime" />
    <result column="end_time" jdbcType="TIMESTAMP" property="endTime" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <association property="book"
                 columnPrefix="b_"
                 resultMap="org.example.mapper.BookMapper.BaseResultMap" />
    <association property="classes"
                 columnPrefix="c_"
                 resultMap="org.example.mapper.ClassesMapper.BaseResultMap" />
    <association property="student"
                 columnPrefix="s_"
                 resultMap="org.example.mapper.StudentMapper.BaseResultMap" />
  </resultMap>
  <sql id="Base_Column_List">
    id, book_id, student_id, start_time, end_time, create_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from borrow_record
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from borrow_record
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="org.example.model.BorrowRecord" useGeneratedKeys="true">
    insert into borrow_record (book_id, student_id, start_time, 
      end_time, create_time)
    values (#{bookId,jdbcType=INTEGER}, #{studentId,jdbcType=INTEGER}, #{startTime,jdbcType=TIMESTAMP}, 
      #{endTime,jdbcType=TIMESTAMP}, #{createTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="org.example.model.BorrowRecord" useGeneratedKeys="true">
    insert into borrow_record
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="bookId != null">
        book_id,
      </if>
      <if test="studentId != null">
        student_id,
      </if>
      <if test="startTime != null">
        start_time,
      </if>
      <if test="endTime != null">
        end_time,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="bookId != null">
        #{bookId,jdbcType=INTEGER},
      </if>
      <if test="studentId != null">
        #{studentId,jdbcType=INTEGER},
      </if>
      <if test="startTime != null">
        #{startTime,jdbcType=TIMESTAMP},
      </if>
      <if test="endTime != null">
        #{endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="org.example.model.BorrowRecord">
    update borrow_record
    <set>
      <if test="bookId != null">
        book_id = #{bookId,jdbcType=INTEGER},
      </if>
      <if test="studentId != null">
        student_id = #{studentId,jdbcType=INTEGER},
      </if>
      <if test="startTime != null">
        start_time = #{startTime,jdbcType=TIMESTAMP},
      </if>
      <if test="endTime != null">
        end_time = #{endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.example.model.BorrowRecord">
    update borrow_record
    set book_id = #{bookId,jdbcType=INTEGER},
      student_id = #{studentId,jdbcType=INTEGER},
      start_time = #{startTime,jdbcType=TIMESTAMP},
      end_time = #{endTime,jdbcType=TIMESTAMP},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectOne" parameterType="org.example.model.BorrowRecord" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from borrow_record
    <where>
      <if test="bookId != null">
        and book_id = #{bookId,jdbcType=INTEGER}
      </if>
      <if test="studentId != null">
        and student_id = #{studentId,jdbcType=INTEGER}
      </if>
      <if test="startTime != null">
        and start_time = #{startTime,jdbcType=TIMESTAMP}
      </if>
      <if test="endTime != null">
        and end_time = #{endTime,jdbcType=TIMESTAMP}
      </if>
      <if test="createTime != null">
        and create_time = #{createTime,jdbcType=TIMESTAMP}
      </if>
    </where>
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    select id, book_id, student_id, start_time, end_time, create_time
    from borrow_record
  </select>
  <select id="selectByCondition" parameterType="org.example.model.BorrowRecord" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from borrow_record
    <where>
      <if test="bookId != null">
        and book_id = #{bookId,jdbcType=INTEGER}
      </if>
      <if test="studentId != null">
        and student_id = #{studentId,jdbcType=INTEGER}
      </if>
      <if test="startTime != null">
        and start_time = #{startTime,jdbcType=TIMESTAMP}
      </if>
      <if test="endTime != null">
        and end_time = #{endTime,jdbcType=TIMESTAMP}
      </if>
      <if test="createTime != null">
        and create_time = #{createTime,jdbcType=TIMESTAMP}
      </if>
    </where>
  </select>
  <delete id="deleteByIds" parameterType="java.util.List">
    delete from borrow_record
      where id in
    <foreach close=")" collection="list" item="item" open="(" separator=",">
      #{item}
    </foreach>
  </delete>




  <!-- 自定义SQL -->
  <select id="query" resultMap="BaseResultMap">
    select
        br.*,
        b.id b_id,
        b.book_name b_book_name,
        b.author b_author,
        b.price b_price,
        c.id c_id,
        c.classes_name c_classes_name,
        c.classes_graduate_year c_classes_graduate_year,
        c.classes_major c_classes_major,
        c.classes_desc c_classes_desc,
        s.id s_id,
        s.student_name s_student_name,
        s.student_no s_student_no,
        s.id_card s_id_card,
        s.student_email s_student_email
    from borrow_record br
        join book b on b.id=br.book_id
        join student s on s.id=br.student_id
        join classes c on c.id=s.classes_id
    where s.student_name like #{searchText}
        order by br.start_time ${sortOrder}
  </select>

  <select id="queryById" resultMap="BaseResultMap">
    select
      br.*,
      b.id b_id,
      b.book_name b_book_name,
      b.author b_author,
      b.price b_price,
      c.id c_id,
      c.classes_name c_classes_name,
      c.classes_graduate_year c_classes_graduate_year,
      c.classes_major c_classes_major,
      c.classes_desc c_classes_desc,
      s.id s_id,
      s.student_name s_student_name,
      s.student_no s_student_no,
      s.id_card s_id_card,
      s.student_email s_student_email
    from borrow_record br
           join book b on b.id=br.book_id
           join student s on s.id=br.student_id
           join classes c on c.id=s.classes_id
    where br.id=#{id}
  </select>
</mapper>